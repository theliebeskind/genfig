// Code generated by genfig plugin 'substitutor'; DO NOT EDIT.

package config

import (
	"os"
	"regexp"
	"strings"
)

var _ = strings.Contains

const (
	maxSubstitutionIteraions = 5
)

var (
	raw Config
)

// Substitute replaces all.
// The return value informs, whether all substitutions could be
// applied within {maxSubstitutionIteraions} or not
func (c *Config) Substitute() bool {
	c.ResetSubstitution()

	// backup the "raw" configuration
	raw = *c

	run := 0
	for {
		if run == maxSubstitutionIteraions {
			return false
		}
		if c.substitute() == 0 {
			return true
		}
		run += 1
	}
}

// ResetSubstitution resets the configuration to the state,
// before the substitution was applied
func (c *Config) ResetSubstitution() {
	c = &raw
}

// substitute tries to replace all substitutions in strings
func (c *Config) substitute() int {
	cnt := 0

	envReplacer := regexp.MustCompile(`\${\w+}`)

	r := strings.NewReplacer(
		"${apis.google.uri}", c.Apis.Google.Uri,

		"${db.pass}", c.Db.Pass,

		"${db.uri}", c.Db.Uri,

		"${db.user}", c.Db.User,

		"${longdesc.de}", c.LongDesc.De,

		"${longdesc.en}", c.LongDesc.En,

		"${project}", c.Project,

		"${server.host}", c.Server.Host,

		"${version}", c.Version,
	)

	if strings.Contains(c.Apis.Google.Uri, "${") {
		cnt += 1
		c.Apis.Google.Uri = r.Replace(c.Apis.Google.Uri)
		if !strings.Contains(c.Apis.Google.Uri, "${") {
			cnt -= 1
		} else {
			c.Apis.Google.Uri = envReplacer.ReplaceAllStringFunc(c.Apis.Google.Uri, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	if strings.Contains(c.Db.Pass, "${") {
		cnt += 1
		c.Db.Pass = r.Replace(c.Db.Pass)
		if !strings.Contains(c.Db.Pass, "${") {
			cnt -= 1
		} else {
			c.Db.Pass = envReplacer.ReplaceAllStringFunc(c.Db.Pass, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	if strings.Contains(c.Db.Uri, "${") {
		cnt += 1
		c.Db.Uri = r.Replace(c.Db.Uri)
		if !strings.Contains(c.Db.Uri, "${") {
			cnt -= 1
		} else {
			c.Db.Uri = envReplacer.ReplaceAllStringFunc(c.Db.Uri, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	if strings.Contains(c.Db.User, "${") {
		cnt += 1
		c.Db.User = r.Replace(c.Db.User)
		if !strings.Contains(c.Db.User, "${") {
			cnt -= 1
		} else {
			c.Db.User = envReplacer.ReplaceAllStringFunc(c.Db.User, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	if strings.Contains(c.LongDesc.De, "${") {
		cnt += 1
		c.LongDesc.De = r.Replace(c.LongDesc.De)
		if !strings.Contains(c.LongDesc.De, "${") {
			cnt -= 1
		} else {
			c.LongDesc.De = envReplacer.ReplaceAllStringFunc(c.LongDesc.De, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	if strings.Contains(c.LongDesc.En, "${") {
		cnt += 1
		c.LongDesc.En = r.Replace(c.LongDesc.En)
		if !strings.Contains(c.LongDesc.En, "${") {
			cnt -= 1
		} else {
			c.LongDesc.En = envReplacer.ReplaceAllStringFunc(c.LongDesc.En, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	if strings.Contains(c.Project, "${") {
		cnt += 1
		c.Project = r.Replace(c.Project)
		if !strings.Contains(c.Project, "${") {
			cnt -= 1
		} else {
			c.Project = envReplacer.ReplaceAllStringFunc(c.Project, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	if strings.Contains(c.Server.Host, "${") {
		cnt += 1
		c.Server.Host = r.Replace(c.Server.Host)
		if !strings.Contains(c.Server.Host, "${") {
			cnt -= 1
		} else {
			c.Server.Host = envReplacer.ReplaceAllStringFunc(c.Server.Host, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	if strings.Contains(c.Version, "${") {
		cnt += 1
		c.Version = r.Replace(c.Version)
		if !strings.Contains(c.Version, "${") {
			cnt -= 1
		} else {
			c.Version = envReplacer.ReplaceAllStringFunc(c.Version, func(in string) (out string) {
				out = in
				envName := in[2 : len(in)-1]
				if envVal, found := os.LookupEnv(envName); found {
					out = envVal
				}
				return
			})
		}
	}

	return cnt
}
