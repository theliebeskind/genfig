// Code generated by genfig plugin 'update_from_env' on 2019-11-19T13:33:01+01:00; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"
)

var (
	_ = os.LookupEnv
	_ = fmt.Sprintf
	_ = json.Marshal
)

func (c *Config) UpdateFromEnv() []error {
	var val string
	_ = val
	var exists bool
	_ = exists
	var errors = []error{}

	if val, exists = os.LookupEnv("APIS_GOOGLE_URI"); exists {
		c.Apis.Google.Uri = val
	}

	if val, exists = os.LookupEnv("DB_PASS"); exists {
		c.Db.Pass = val
	}

	if val, exists = os.LookupEnv("DB_URI"); exists {
		c.Db.Uri = val
	}

	if val, exists = os.LookupEnv("DB_USER"); exists {
		c.Db.User = val
	}

	if val, exists = os.LookupEnv("EMPTYARRAY"); exists {
		if v, err := parseInterfaceSlice(val); err == nil {
			c.EmptyArray = v
		} else {
			errors = append(errors, fmt.Errorf("Genfig: could not parse []interface {} from CONFIG_EMPTYARRAY ('%s')\n", val))
		}
	}

	if val, exists = os.LookupEnv("LIST"); exists {
		if v, err := parseMapSlice(val); err == nil {
			c.List = v
		} else {
			errors = append(errors, fmt.Errorf("Genfig: could not parse []map[interface {}]interface {} from CONFIG_LIST ('%s')\n", val))
		}
	}

	if val, exists = os.LookupEnv("LONGDESC_DE"); exists {
		c.LongDesc.De = val
	}

	if val, exists = os.LookupEnv("LONGDESC_EN"); exists {
		c.LongDesc.En = val
	}

	if val, exists = os.LookupEnv("PROJECT"); exists {
		c.Project = val
	}

	if val, exists = os.LookupEnv("RANDOMIZER_THRESHOLD"); exists {
		if v, err := parseFloat64(val); err == nil {
			c.Randomizer.Threshold = v
		} else {
			errors = append(errors, fmt.Errorf("Genfig: could not parse float64 from CONFIG_RANDOMIZER_THRESHOLD ('%s')\n", val))
		}
	}

	if val, exists = os.LookupEnv("SECRETS"); exists {
		if v, err := parseStringSlice(val); err == nil {
			c.Secrets = v
		} else {
			errors = append(errors, fmt.Errorf("Genfig: could not parse []string from CONFIG_SECRETS ('%s')\n", val))
		}
	}

	if val, exists = os.LookupEnv("SERVER_HOST"); exists {
		c.Server.Host = val
	}

	if val, exists = os.LookupEnv("SERVER_PORT"); exists {
		if v, err := parseInt64(val); err == nil {
			c.Server.Port = v
		} else {
			errors = append(errors, fmt.Errorf("Genfig: could not parse int64 from CONFIG_SERVER_PORT ('%s')\n", val))
		}
	}

	if val, exists = os.LookupEnv("VERSION"); exists {
		c.Version = val
	}

	if val, exists = os.LookupEnv("WIP"); exists {
		if v, err := parseBool(val); err == nil {
			c.Wip = v
		} else {
			errors = append(errors, fmt.Errorf("Genfig: could not parse bool from CONFIG_WIP ('%s')\n", val))
		}
	}

	if len(errors) == 0 {
		return nil
	} else {
		return errors
	}
}

// these are wrappers, so that they can
// a) be referenced easily be the code generator and
// b) be replaces easily by you (or me)
func parseInt64(s string) (i int64, err error) {
	i, err = strconv.ParseInt(s, 10, 0)
	return
}

func parseFloat64(s string) (f float64, err error) {
	f, err = strconv.ParseFloat(s, 0)
	return
}

func parseBool(s string) (b bool, err error) {
	b, err = strconv.ParseBool(s)
	return
}

func parseStringSlice(s string) (a []string, err error) {
	err = json.Unmarshal([]byte(s), &a)
	return
}

func parseInt64Slice(s string) (a []int64, err error) {
	err = json.Unmarshal([]byte(s), &a)
	return
}

func parseFloat64Slice(s string) (a []float64, err error) {
	err = json.Unmarshal([]byte(s), &a)
	return
}

func parseInterfaceSlice(s string) (a []interface{}, err error) {
	err = json.Unmarshal([]byte(s), &a)
	return
}

func parseMapSlice(s string) (a []map[interface{}]interface{}, err error) {
	err = json.Unmarshal([]byte(s), &a)
	return
}
