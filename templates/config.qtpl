{% import "fmt" %}
{% import "strings" %}
{% import "reflect" %}
{% import "github.com/theliebeskind/genfig/strategies" %}

{% func Config(env string, config strategies.ParsingResult) %}
var {%s= strings.Title(env) %}Config = Config{{%
for k, v := range config %}
  {%= configLine(k, v, 1) %}
{% endfor %}}
{% endfunc %}

{% func configLine(k string, v interface{}, o int) 
%}{%s= strings.Title(k) %}: {%= configValue(v, o) 
%},{% endfunc %}

{% func configValue(v interface{}, o int)
%}{% code 
  indent := strings.Repeat("  ", o)
  typStr := reflect.TypeOf(v).String()
  kind := reflect.TypeOf(v).Kind()
  kindStr := kind.String()
%}{% if typStr == "string"
%}"{%v= v
%}"{% elseif kindStr == typStr
%}{%v= v
%}{% elseif kind == reflect.Slice
%}{%s= fmt.Sprintf("%#v", v)
%}{% else 
%}{
{% 
if typStr == "map[interface {}]interface {}" %}{% for k, v := range v.(map[interface {}]interface {}) 
%}  {%s= indent %}{%= configLine(fmt.Sprintf("%v", k), v, o+1) %}
{% endfor 
%}{% else %}{% for k, v := range v.(map[string]interface {}) 
%}  {%s= indent %}{%= configLine(k, v, o+1) %}{% endfor 
%}{% endif %}{%s= indent %}}{% endif 
%}{% endfunc %}