{% import "fmt" %}
{% import "strings" %}
{% import "reflect" %}
{% import "github.com/theliebeskind/genfig/strategies" %}

{% func Schema(config strategies.ParsingResult) 
%}// Code generated by genfig; DO NOT EDIT.

package config

type Config struct {{%
for k, v := range config %}
  {%= schemaLine(k, v, 1) %}
{% endfor %}}
{% endfunc %}

{% func schemaLine(k string, v interface{}, o int) 
%}{%s= strings.Title(k) %} {%= schemaType(v, o) 
%}{% endfunc %}

{% func schemaType(v interface{}, o int)
%}{% code 
  indent := strings.Repeat("  ", o)
%}{% if reflect.TypeOf(v).Kind().String() == reflect.TypeOf(v).String() 
%}{%s= reflect.TypeOf(v).String() 
%}{% elseif reflect.TypeOf(v).Kind() == reflect.Slice 
%}{%s= reflect.TypeOf(v).String() 
%}{% else 
%}struct {
{% 
if reflect.TypeOf(v).String() == "map[interface {}]interface {}" %}{% for k, v := range v.(map[interface {}]interface {}) 
%}  {%s= indent %}{%= schemaLine(fmt.Sprintf("%v", k), v, o+1) %}
{% endfor 
%}{% else %}{% for k, v := range v.(map[string]interface {}) 
%}  {%s= indent %}{%= schemaLine(k, v, o+1) %}{% endfor 
%}{% endif %}{%s= indent %}}{% endif 
%}{% endfunc %}