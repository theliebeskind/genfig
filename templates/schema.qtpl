{% import "fmt" %}
{% import "strings" %}
{% import "reflect" %}
{% import "github.com/theliebeskind/genfig/strategies" %}
{% import "github.com/theliebeskind/genfig/util" %}

{% func Schema(config strategies.ParsingResult) %}
type Config struct {{%
for k, v := range config %}
  {%= schemaLine(k, v, 1) %}
{% endfor %}}
{% endfunc %}

{% func schemaLine(k string, v interface{}, o int) 
%}{%s= strings.Title(k) %} {%= schemaType(v, o) 
%}{% endfunc %}

{% func schemaType(v interface{}, o int)
%}{% code 
  indent := strings.Repeat("  ", o)
  typStr := reflect.TypeOf(v).String()
  kind := reflect.TypeOf(v).Kind()
  kindStr := kind.String()
%}{% if kindStr == typStr || (kind == reflect.Slice && !util.IsInterfaceSlice(v))
%}{%s= util.Make64(typStr)
%}{% elseif kind == reflect.Slice && util.IsInterfaceSlice(v)
%}{%s= util.DetectSliceTypeString(v.([]interface{})) 
%}{% else 
%}struct {
{% 
if typStr == "map[interface {}]interface {}" %}{% for k, v := range v.(map[interface {}]interface {}) 
%}  {%s= indent %}{%= schemaLine(fmt.Sprintf("%v", k), v, o+1) %}
{% endfor 
%}{% else %}{% for k, v := range v.(map[string]interface {}) 
%}  {%s= indent %}{%= schemaLine(k, v, o+1) %}{% endfor 
%}{% endif %}{%s= indent %}}{% endif 
%}{% endfunc %}