// Code generated by qtc from "schema.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line templates/schema.qtpl:1
package templates

//line templates/schema.qtpl:1
import "fmt"

//line templates/schema.qtpl:2
import "strings"

//line templates/schema.qtpl:3
import "reflect"

//line templates/schema.qtpl:4
import "github.com/theliebeskind/genfig/strategies"

//line templates/schema.qtpl:5
import "github.com/theliebeskind/genfig/util"

//line templates/schema.qtpl:7
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line templates/schema.qtpl:7
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line templates/schema.qtpl:7
func StreamSchema(qw422016 *qt422016.Writer, config strategies.ParsingResult) {
//line templates/schema.qtpl:7
	qw422016.N().S(`
type Config struct {`)
//line templates/schema.qtpl:9
	for k, v := range config {
//line templates/schema.qtpl:9
		qw422016.N().S(`
  `)
//line templates/schema.qtpl:10
		streamschemaLine(qw422016, k, v, 1)
//line templates/schema.qtpl:10
		qw422016.N().S(`
`)
//line templates/schema.qtpl:11
	}
//line templates/schema.qtpl:11
	qw422016.N().S(`}
`)
//line templates/schema.qtpl:12
}

//line templates/schema.qtpl:12
func WriteSchema(qq422016 qtio422016.Writer, config strategies.ParsingResult) {
//line templates/schema.qtpl:12
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/schema.qtpl:12
	StreamSchema(qw422016, config)
//line templates/schema.qtpl:12
	qt422016.ReleaseWriter(qw422016)
//line templates/schema.qtpl:12
}

//line templates/schema.qtpl:12
func Schema(config strategies.ParsingResult) string {
//line templates/schema.qtpl:12
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/schema.qtpl:12
	WriteSchema(qb422016, config)
//line templates/schema.qtpl:12
	qs422016 := string(qb422016.B)
//line templates/schema.qtpl:12
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/schema.qtpl:12
	return qs422016
//line templates/schema.qtpl:12
}

//line templates/schema.qtpl:14
func streamschemaLine(qw422016 *qt422016.Writer, k string, v interface{}, o int) {
//line templates/schema.qtpl:15
	qw422016.N().S(strings.Title(k))
//line templates/schema.qtpl:15
	qw422016.N().S(` `)
//line templates/schema.qtpl:15
	streamschemaType(qw422016, v, o)
//line templates/schema.qtpl:16
}

//line templates/schema.qtpl:16
func writeschemaLine(qq422016 qtio422016.Writer, k string, v interface{}, o int) {
//line templates/schema.qtpl:16
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/schema.qtpl:16
	streamschemaLine(qw422016, k, v, o)
//line templates/schema.qtpl:16
	qt422016.ReleaseWriter(qw422016)
//line templates/schema.qtpl:16
}

//line templates/schema.qtpl:16
func schemaLine(k string, v interface{}, o int) string {
//line templates/schema.qtpl:16
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/schema.qtpl:16
	writeschemaLine(qb422016, k, v, o)
//line templates/schema.qtpl:16
	qs422016 := string(qb422016.B)
//line templates/schema.qtpl:16
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/schema.qtpl:16
	return qs422016
//line templates/schema.qtpl:16
}

//line templates/schema.qtpl:18
func streamschemaType(qw422016 *qt422016.Writer, v interface{}, o int) {
//line templates/schema.qtpl:20
	indent := strings.Repeat("  ", o)
	typStr := reflect.TypeOf(v).String()
	kind := reflect.TypeOf(v).Kind()
	kindStr := kind.String()

//line templates/schema.qtpl:24
	if kindStr == typStr || (kind == reflect.Slice && !util.IsInterfaceSlice(v)) {
//line templates/schema.qtpl:25
		qw422016.N().S(util.Make64(typStr))
//line templates/schema.qtpl:26
	} else if kind == reflect.Slice && util.IsInterfaceSlice(v) {
//line templates/schema.qtpl:27
		qw422016.N().S(util.DetectSliceTypeString(v.([]interface{})))
//line templates/schema.qtpl:29
	} else {
//line templates/schema.qtpl:29
		qw422016.N().S(`struct {
`)
//line templates/schema.qtpl:31
		if typStr == "map[interface {}]interface {}" {
//line templates/schema.qtpl:31
			for k, v := range v.(map[interface{}]interface{}) {
//line templates/schema.qtpl:32
				qw422016.N().S(`  `)
//line templates/schema.qtpl:32
				qw422016.N().S(indent)
//line templates/schema.qtpl:32
				streamschemaLine(qw422016, fmt.Sprintf("%v", k), v, o+1)
//line templates/schema.qtpl:32
				qw422016.N().S(`
`)
//line templates/schema.qtpl:34
			}
//line templates/schema.qtpl:34
		} else {
//line templates/schema.qtpl:34
			for k, v := range v.(map[string]interface{}) {
//line templates/schema.qtpl:35
				qw422016.N().S(`  `)
//line templates/schema.qtpl:35
				qw422016.N().S(indent)
//line templates/schema.qtpl:35
				streamschemaLine(qw422016, k, v, o+1)
//line templates/schema.qtpl:36
			}
//line templates/schema.qtpl:36
		}
//line templates/schema.qtpl:36
		qw422016.N().S(indent)
//line templates/schema.qtpl:36
		qw422016.N().S(`}`)
//line templates/schema.qtpl:37
	}
//line templates/schema.qtpl:37
}

//line templates/schema.qtpl:37
func writeschemaType(qq422016 qtio422016.Writer, v interface{}, o int) {
//line templates/schema.qtpl:37
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/schema.qtpl:37
	streamschemaType(qw422016, v, o)
//line templates/schema.qtpl:37
	qt422016.ReleaseWriter(qw422016)
//line templates/schema.qtpl:37
}

//line templates/schema.qtpl:37
func schemaType(v interface{}, o int) string {
//line templates/schema.qtpl:37
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/schema.qtpl:37
	writeschemaType(qb422016, v, o)
//line templates/schema.qtpl:37
	qs422016 := string(qb422016.B)
//line templates/schema.qtpl:37
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/schema.qtpl:37
	return qs422016
//line templates/schema.qtpl:37
}
